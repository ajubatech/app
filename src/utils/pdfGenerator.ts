import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { Invoice, InvoiceItem, InvoiceSettings } from '../types';

export const generateInvoicePDF = (
  invoice: Invoice, 
  settings?: InvoiceSettings,
  userData?: any
) => {
  // Create a new PDF document
  const doc = new jsPDF();
  
  // Set document properties
  doc.setProperties({
    title: `Invoice ${invoice.invoice_number}`,
    subject: invoice.title,
    author: settings?.business_name || userData?.full_name || 'ListHouze',
    creator: 'ListHouze Invoice Generator'
  });
  
  // Business information
  const businessName = settings?.business_name || userData?.full_name || 'Your Business';
  const businessAddress = settings?.address || '';
  const businessEmail = settings?.email || userData?.email || '';
  const businessPhone = settings?.phone || '';
  
  // Add logo if available
  if (settings?.logo_url) {
    try {
      doc.addImage(settings.logo_url, 'JPEG', 15, 15, 50, 20);
    } catch (error) {
      console.error('Error adding logo to PDF:', error);
    }
  }
  
  // Add business information
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text(businessName, 15, 50);
  if (businessAddress) {
    const addressLines = businessAddress.split('\n');
    let y = 55;
    addressLines.forEach(line => {
      doc.text(line, 15, y);
      y += 5;
    });
  }
  if (businessEmail) {
    doc.text(businessEmail, 15, businessAddress ? 70 : 55);
  }
  if (businessPhone) {
    doc.text(businessPhone, 15, businessAddress ? 75 : 60);
  }
  
  // Add invoice title and number
  doc.setFontSize(24);
  doc.setTextColor(0, 0, 0);
  doc.text('INVOICE', 140, 30);
  
  doc.setFontSize(10);
  doc.text(`Invoice #: ${invoice.invoice_number}`, 140, 40);
  doc.text(`Issue Date: ${new Date(invoice.issue_date).toLocaleDateString()}`, 140, 45);
  doc.text(`Due Date: ${new Date(invoice.due_date).toLocaleDateString()}`, 140, 50);
  doc.text(`Status: ${invoice.status.toUpperCase()}`, 140, 55);
  
  // Add recipient information
  doc.setFontSize(12);
  doc.setTextColor(0, 0, 0);
  doc.text('Bill To:', 15, 90);
  
  doc.setFontSize(10);
  doc.text(invoice.recipient_name || 'Client', 15, 100);
  doc.text(invoice.recipient_email, 15, 105);
  if (invoice.recipient_address) {
    const addressLines = invoice.recipient_address.split('\n');
    let y = 110;
    addressLines.forEach(line => {
      doc.text(line, 15, y);
      y += 5;
    });
  }
  
  // Add invoice items table
  const tableColumn = ['Description', 'Quantity', 'Unit Price', 'Amount'];
  const tableRows = invoice.items?.map(item => [
    item.description,
    item.quantity.toString(),
    `$${item.unit_price.toFixed(2)}`,
    `$${item.amount.toFixed(2)}`
  ]) || [];
  
  (doc as any).autoTable({
    head: [tableColumn],
    body: tableRows,
    startY: 130,
    theme: 'grid',
    styles: { fontSize: 9 },
    headStyles: { fillColor: [66, 139, 202] },
    columnStyles: {
      0: { cellWidth: 'auto' },
      1: { cellWidth: 30, halign: 'right' },
      2: { cellWidth: 40, halign: 'right' },
      3: { cellWidth: 40, halign: 'right' }
    }
  });
  
  // Add totals
  const finalY = (doc as any).lastAutoTable.finalY + 10;
  
  doc.setFontSize(10);
  doc.text('Subtotal:', 140, finalY);
  doc.text(`$${invoice.amount.toFixed(2)}`, 180, finalY, { align: 'right' });
  
  doc.text(`Tax (${invoice.tax_rate || 0}%):`, 140, finalY + 5);
  doc.text(`$${(invoice.tax_amount || 0).toFixed(2)}`, 180, finalY + 5, { align: 'right' });
  
  doc.setFontSize(12);
  doc.setFont(undefined, 'bold');
  doc.text('Total:', 140, finalY + 15);
  doc.text(`$${invoice.total_amount.toFixed(2)}`, 180, finalY + 15, { align: 'right' });
  
  // Add notes
  if (invoice.notes) {
    doc.setFontSize(10);
    doc.setFont(undefined, 'bold');
    doc.text('Notes:', 15, finalY + 30);
    doc.setFont(undefined, 'normal');
    doc.text(invoice.notes, 15, finalY + 35);
  }
  
  // Add terms
  if (settings?.terms) {
    const termsY = invoice.notes ? finalY + 50 : finalY + 30;
    doc.setFontSize(10);
    doc.setFont(undefined, 'bold');
    doc.text('Terms and Conditions:', 15, termsY);
    doc.setFont(undefined, 'normal');
    doc.text(settings.terms, 15, termsY + 5);
  }
  
  // Add footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setTextColor(150, 150, 150);
    doc.text(
      'Generated by ListHouze Invoice System',
      doc.internal.pageSize.getWidth() / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: 'center' }
    );
  }
  
  return doc;
};

export const downloadInvoicePDF = (
  invoice: Invoice, 
  settings?: InvoiceSettings,
  userData?: any
) => {
  const doc = generateInvoicePDF(invoice, settings, userData);
  doc.save(`Invoice-${invoice.invoice_number}.pdf`);
};